name: Create Issues and Manage Project

on:
  workflow_dispatch:  # Manual trigger for the button

jobs:
  create-issues-and-project:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 1: Check if the project exists
    - name: Check if project exists
      id: check-project
      run: |
        PROJECT_NAME="My GitHub Project"
        PROJECT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/projects | \
          jq -r --arg PROJECT_NAME "$PROJECT_NAME" '.[] | select(.name == $PROJECT_NAME) | .id')
          
        if [ -z "$PROJECT_ID" ]; then
          echo "Project does not exist."
          echo "::set-output name=project_exists::false"
        else
          echo "Project exists with ID: $PROJECT_ID"
          echo "::set-output name=project_exists::true"
          echo "::set-output name=project_id::$PROJECT_ID"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Step 2: Create the project if it doesn't exist
    - name: Create project (if not exists)
      if: steps.check-project.outputs.project_exists == 'false'
      id: create-project
      run: |
        PROJECT_NAME="My GitHub Project"
        PROJECT_ID=$(curl -s -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.inertia-preview+json" \
          https://api.github.com/repos/${{ github.repository }}/projects \
          -d "{\"name\":\"$PROJECT_NAME\"}" | jq -r '.id')
        echo "Created project with ID: $PROJECT_ID"
        echo "::set-output name=project_id::$PROJECT_ID"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Step 3: Read issues from file and create them
    - name: Read issue file and create issues
      id: issue-file
      run: |
        ISSUE_TITLES=$(grep -oP '^Title: \K.*' issues.txt)
        ISSUE_DESCRIPTIONS=$(grep -oP '^Description: \K.*' issues.txt)
        echo "::set-output name=titles::$ISSUE_TITLES"
        echo "::set-output name=descriptions::$ISSUE_DESCRIPTIONS"

    # Step 4: Create issues and add them to the project
    - name: Create issues and add to project
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        IFS=$'\n' read -rd '' -a TITLES <<< "${{ steps.issue-file.outputs.titles }}"
        IFS=$'\n' read -rd '' -a DESCRIPTIONS <<< "${{ steps.issue-file.outputs.descriptions }}"

        PROJECT_ID=${{ steps.check-project.outputs.project_id }}
        [ -z "$PROJECT_ID" ] && PROJECT_ID=${{ steps.create-project.outputs.project_id }}
        
        for i in "${!TITLES[@]}"; do
          TITLE="${TITLES[$i]}"
          DESCRIPTION="${DESCRIPTIONS[$i]}"
          
          # Create issue
          ISSUE_RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"title\":\"$TITLE\", \"body\":\"$DESCRIPTION\"}" \
            https://api.github.com/repos/${{ github.repository }}/issues)

          ISSUE_ID=$(echo "$ISSUE_RESPONSE" | jq -r '.id')
          
          # Add issue to project
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.inertia-preview+json" \
            -d "{\"content_id\": $ISSUE_ID, \"content_type\": \"Issue\"}" \
            https://api.github.com/projects/$PROJECT_ID/columns/1/cards

          echo "Issue '$TITLE' added to project"
        done
